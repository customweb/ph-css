/**
 * Copyright (C) 2014-2015 Philip Helger (www.helger.com)
 * philip[at]helger[dot]com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
options {
// JavaCC options
  // LOOKAHEAD = 2;
  CHOICE_AMBIGUITY_CHECK = 5;
  STATIC = false;  // to allow for multiple parser instances
  // DEBUG_PARSER = true;
  // DEBUG_LOOKAHEAD = true;
  // DEBUG_TOKEN_MANAGER = true;
  // ERROR_REPORTING = false;
  JAVA_UNICODE_ESCAPE = true;
  UNICODE_INPUT = true;
  IGNORE_CASE = true;
  // USER_TOKEN_MANAGER = true;
  // SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
  // USER_CHAR_STREAM = true;
  FORCE_LA_CHECK = true;

// JJTree options
  // MULTI = true;
  // VISITOR = true;
  // BUILD_NODE_FILES = false;
  // NODE_DEFAULT_VOID = true;
  NODE_CLASS = "com.helger.css.parser.CSSNode";
  NODE_PREFIX = "";
  // NODE_USES_PARSER = true;
  TRACK_TOKENS = true;
  // NODE_SCOPE_HOOK = true;
}

PARSER_BEGIN(ParserCSS21)
package com.helger.css.parser.generated;

public class ParserCSS21 extends com.helger.css.parser.AbstractParserCSS
{
  private static final org.slf4j.Logger s_aLogger = org.slf4j.LoggerFactory.getLogger (ParserCSS21.class);
  
  // Used when NODE_SCOPE_HOOK is true - for debugging only
  // Package scope to avoid warning when NODE_SCOPE_HOOK is false
  void jjtreeOpenNodeScope (final Node aNode)
  {
    if (s_aLogger.isDebugEnabled ())
      s_aLogger.debug ("Opening scope for " + aNode.toString ());
  }
  
  void jjtreeCloseNodeScope (final Node aNode)
  {
    if (s_aLogger.isDebugEnabled ())
      s_aLogger.debug ("Closing scope for " + aNode.toString ());
  }
}
PARSER_END(ParserCSS21)

TOKEN_MGR_DECLS :
{
  private static final org.slf4j.Logger s_aLogger = org.slf4j.LoggerFactory.getLogger (ParserCSS21TokenManager.class);
  
  void backup(final int nChars) { 
    input_stream.backup(nChars);
  } 
}

<DEFAULT>
MORE :
{
  < "/*" > : IN_COMMENT
}

<IN_COMMENT>
MORE :
{
  < ~[] > : IN_COMMENT
}

<IN_COMMENT>
SPECIAL_TOKEN :
{
  < "*/" > : DEFAULT
}

<DEFAULT, IN_UNKNOWN_RULE>
TOKEN :
{
  < S: (" "|"\t"|"\r"|"\n"|"\f")+ >
| < W: ( <S> )? >
}

<DEFAULT, IN_UNKNOWN_RULE>
TOKEN :
{
// private reg ex come first (no actions possible!)
  < #H: ["0"-"9","a"-"f"] >
| < #HNUM: <H>
         | <H><H>
         | <H><H><H>
         | <H><H><H><H>
         | <H><H><H><H><H>
         | <H><H><H><H><H><H>
         >

// nonascii  [^\0-\177] - everything except 0x00-0x7f
| < #NONASCII: ["\u0080"-"\uffff"] >

| < #ESCAPE_UNICODE: "\\" <HNUM> ( "\r\n"
                                 | [" ","\t","\r","\n","\f"]
                                 )? >   
| < #ESCAPE_OTHER: "\\" ~["\r","\n","\f","0"-"9","a"-"f"] >
| < #ESCAPE: <ESCAPE_UNICODE>
           | <ESCAPE_OTHER> >
// nmstart      [_a-z]|{nonascii}|{escape}
| < #NMSTART: ["_","a"-"z"]
            | <NONASCII>
            | <ESCAPE>
            >
// nmchar       [_a-z0-9-]|{nonascii}|{escape}
| < #NMCHAR: ["_","a"-"z","0"-"9","-"]
           | <NONASCII>
           | <ESCAPE>
           >
// First, inside a string, a backslash followed by a newline is ignored (i.e., the string is deemed not to contain either the backslash or the newline).           
| < STRING_EOL: "\\" ( "\n"
                     | "\r\n"
                     | "\r"
                     | "\f" ) >  { matchedToken.image = ""; }    
| < STRING1: "\"" ( ~["\n","\r","\f","\\","\""]
                  | <STRING_EOL>
                  | <ESCAPE>
                  )* "\"" >
| < STRING2: "'" ( ~["\n","\r","\f","\\","'"]
                 | <STRING_EOL>
                 | <ESCAPE>
                 )* "'" >
| < INVALID_STRING1: "\"" ( ~["\n","\r","\f","\\","\""]
                          | <STRING_EOL>
                          | <ESCAPE>
                          )* >
| < INVALID_STRING2: "'" ( ~["\n","\r","\f","\\","'"]
                         | <STRING_EOL>
                         | <ESCAPE>
                         )* >

| < #NAME: ( <NMCHAR> )+ >
| < #NUM: ( ["0"-"9"] )+
        | ( ["0"-"9"] )* "." ( ["0"-"9"] )+ >
| < #URLCHAR: ["!","#","$","%","&","*"-"[","]"-"~"]
            | <NONASCII>
            | <ESCAPE> >

| < NUMBER: <NUM> >

| < LBRACE: <W> "{" >
| < RBRACE: "}" >
| < LSQUARE: "[" >
| < RSQUARE: "]" >
| < LROUND: "(" >
| < RROUND: ")" >
| < DOT: "." >
| < COMMA: <W> "," >
| < SEMICOLON: ";" >
| < COLON: ":" >
| < ASTERISK: "*" >
| < SLASH: "/" >
| < MINUS: "-" >
| < EQUALS: "=" >
| < DASH: "|" >
| < PLUS: "+" >
| < GREATER: ">" >
| < HASH: "#" <NAME> >
| < INCLUDES: "~=" >
| < DASHMATCH: "|=" >
| < CDO: "<!--" >
| < CDC: "-->" >
| < CHARSET_SYM: "@charset" >
| < IMPORT_SYM: "@import" >
| < NAMESPACE_SYM: "@namespace" >
| < PAGE_SYM: "@page" >
| < MEDIA_SYM: "@media" >
| < AT_UNKNOWN: "@" <IDENT> > : IN_UNKNOWN_RULE
| < IMPORTANT_SYM: "!" ( <S> )* "important" >

// before ident!
| < INHERIT: "inherit" >

// ident        -?{nmstart}{nmchar}*
// Note: "*" hack for IE <= 6
// Note: "$" hack for IE <= 7
| < IDENT: ( "-"
           | "$" ( <S> )*
           | "*" ( <S> )* )? 
           <NMSTART> 
           ( <NMCHAR> )* > { matchedToken.image = CSSParseHelper.validateIdentifier(image); }

| < EM: <NUM> "em" >           { matchedToken.image = CSSParseHelper.splitNumber(image) + "em"; }
| < EX: <NUM> "ex" >           { matchedToken.image = CSSParseHelper.splitNumber(image) + "ex"; }
| < PX: <NUM> "px" >           { matchedToken.image = CSSParseHelper.splitNumber(image) + "px"; }
| < LENGTH_CM: <NUM> "cm" >    { matchedToken.image = CSSParseHelper.splitNumber(image) + "cm"; }
| < LENGTH_MM: <NUM> "mm" >    { matchedToken.image = CSSParseHelper.splitNumber(image) + "mm"; }
| < LENGTH_IN: <NUM> "in" >    { matchedToken.image = CSSParseHelper.splitNumber(image) + "in"; }
| < LENGTH_PT: <NUM> "pt" >    { matchedToken.image = CSSParseHelper.splitNumber(image) + "pt"; }
| < LENGTH_PC: <NUM> "pc" >    { matchedToken.image = CSSParseHelper.splitNumber(image) + "pc"; }
| < ANGLE_DEG: <NUM> "deg" >   { matchedToken.image = CSSParseHelper.splitNumber(image) + "deg"; }
| < ANGLE_RAD: <NUM> "rad" >   { matchedToken.image = CSSParseHelper.splitNumber(image) + "rad"; }
| < ANGLE_GRAD: <NUM> "grad" > { matchedToken.image = CSSParseHelper.splitNumber(image) + "grad"; }
| < TIME_MS: <NUM> "ms" >      { matchedToken.image = CSSParseHelper.splitNumber(image) + "ms"; }
| < TIME_S: <NUM> "s" >        { matchedToken.image = CSSParseHelper.splitNumber(image) + "s"; }
| < FREQ_HZ: <NUM> "hz" >      { matchedToken.image = CSSParseHelper.splitNumber(image) + "hz"; }
| < FREQ_KHZ: <NUM> "khz" >    { matchedToken.image = CSSParseHelper.splitNumber(image) + "khz"; }
| < PERCENTAGE: <NUM> "%" >    { matchedToken.image = CSSParseHelper.splitNumber(image) + "%"; }
| < DIMENSION: <NUM> <IDENT> >

| < #URL_CONTENT: ( <S> )* ( <STRING1>
                           | <STRING2>
                           | ( <URLCHAR> )*
                           ) ( <S> )* >
| < URL: "url(" <URL_CONTENT> ")" >  { matchedToken.image = CSSParseHelper.trimUrl(image); }

// Expressions were abandoned after IE8
| < FUNCTION_EXPRESSION: "expression(" >
// Extension for IE
//   filter: progid:DXImageTransform.Microsoft.Alpha(opacity=50);
| < FUNCTION: <IDENT> "(" 
            | "progid" ( <S> )* <COLON> ( <S> )* <IDENT> ( <DOT> <IDENT> )* ( <S> )* "(" 
            > { matchedToken.image = image.toString (); }
}

// Single line comments are handled in all states except in unknown rules, because
// there, tokens are simply chained together to a string 
<DEFAULT>
SPECIAL_TOKEN :
{
  // Skip until end of line or ";" or "}"
  // Don't consume ";" or "}" characters!
  < SINGLE_LINE_COMMENT: "//" (~["\n","\r",";","}"])* ("\n"|"\r"|"\r\n")? >
}

<*> TOKEN:
{
  < UNKNOWN: ~[] >
  {
    s_aLogger.error("Illegal character: " + image.toString());
  }
}

JAVACODE
private void errorUnexpectedRule(final String sRule, final String sMsg) #void
{
  if (m_aCustomErrorHandler != null)
    m_aCustomErrorHandler.onCSSUnexpectedRule (token, sRule, sMsg);
  else  
    s_aLogger.warn("[" + token.beginLine + ":" + token.beginColumn + "] Unexpected rule '" + sRule + "': " + sMsg);
}

JAVACODE
private Token errorSkipTo(final ParseException ex, final int... aKinds) throws ParseException
{
  // Skip until (including) the first matching token
  Token tok;
  do
  {
    tok = getNextToken();
    if (tok.kind == EOF)
    {
      // Encountered EOF while skipping - throw the original exception!
      throw ex;
    }
  } while (!com.helger.commons.collection.ArrayHelper.contains (aKinds, tok.kind));

  if (s_aLogger.isDebugEnabled ())
    s_aLogger.debug ("Skipped until token " + tok.toString ());

  if (m_aCustomErrorHandler != null)
    m_aCustomErrorHandler.onCSSParseError (ex.currentToken, ex.expectedTokenSequences, ex.tokenImage, tok);
  else  
    s_aLogger.warn("CSS recoverable parse error", ex);
  return tok;
}

JAVACODE
/** 
 * Skip to matching closing ')'
 * @return all the string that was skipped. Never <code>null</code>
 */
private String javaSkipToClosingParantheses() throws ParseException #void {
  final StringBuilder aSB = new StringBuilder ();
  int nNesting = 1;
  while (true) {
    final Token tok = getNextToken();
    aSB.append (tok.image);
    if (tok.kind == LROUND) 
      nNesting++;
    else
      if (tok.kind == RROUND) {
        nNesting--;
        if (nNesting == 0)
          break;
      }
      else {
        if (tok.kind == EOF)
          throw new ParseEOFException ("EOF while searching for matching closing ')'.");
        // Sometimes token images contain parenthesis
        nNesting += com.helger.commons.string.StringHelper.getCharCount (tok.image, '(');
        nNesting -= com.helger.commons.string.StringHelper.getCharCount (tok.image, ')');
      }  
  }
  return aSB.toString ();
}

JAVACODE
/** 
 * Skip to next opening '{'
 * @return all the string that was skipped. Never <code>null</code>
 */ 
private String javaSkipToOpeningBrace() throws ParseException #void {
  final StringBuilder aSB = new StringBuilder ();
  Token tok;
  while (true) {
    tok = getNextToken();
    if (tok.kind == EOF)
      throw new ParseEOFException ("EOF while searching for opening '{'.");
    if (tok.kind == LBRACE)
      break;
    aSB.append (tok.image);
  }
  return aSB.toString ();
}

JAVACODE
/** 
 * Skip to matching closing '}'
 * @return all the string that was skipped. Never <code>null</code>
 * @throws ParseEOFException If EOF occurs while skipping
 */
private String javaSkipToClosingBrace() throws ParseEOFException #void {
  final StringBuilder aSB = new StringBuilder ();
  int nNesting = 1;
  while (true) {
    final Token tok = getNextToken();
    if (tok.kind == LBRACE) 
      nNesting++;
    else
      if (tok.kind == RBRACE) {
        nNesting--;
        if (nNesting == 0)
          break;
      }
      else {
        if (tok.kind == EOF)
          throw new ParseEOFException ("EOF while searching for matching closing '}'.");
        // Token images never contain brackets
      }  
    aSB.append (tok.image);
  }
  // System.out.println ("SKIPPED1: '" + aSB + "'");
  return aSB.toString ();
}

JAVACODE
/** 
 * Skip to matching closing '}' or the next ';' on the same level
 * @return all the string that was skipped. Never <code>null</code>
 * @throws ParseEOFException If EOF occurs while skipping
 */
private String javaSkipToClosingBraceOrSemicolon() throws ParseEOFException #void {
  final StringBuilder aSB = new StringBuilder ();
  int nNesting = 1;
  while (true) {
    final Token tok = getNextToken();
    if (tok.kind == LBRACE) 
      nNesting++;
    else
      if (tok.kind == RBRACE) {
        nNesting--;
        if (nNesting == 0)
          break;
      }
      else
        if (tok.kind == SEMICOLON) {
          if (nNesting == 1)
            break;
        }  
        else {
          if (tok.kind == EOF)
            throw new ParseEOFException ("EOF while searching for matching closing '}' or ';'.");
          // Token images never contain brackets
        }
    aSB.append (tok.image);
  }
  // System.out.println ("SKIPPED2: '" + aSB + "'");
  return aSB.toString ();
}

JAVACODE
/** 
 * Browser compliant skip to matching closing '}'
 * @throws ParseEOFException If EOF occurs while skipping
 */
private void browserCompliantSkip() throws ParseEOFException #void {
  javaSkipToClosingBrace ();
  // push back last token!
  token_source.backup(1);
}

JAVACODE
/** 
 * Browser compliant skip to matching closing '}' or ';'
 * @throws ParseEOFException If EOF occurs while skipping
 */
private void browserCompliantSkipDecl() throws ParseEOFException #void {
  javaSkipToClosingBraceOrSemicolon ();
  // push back last token!
  token_source.backup(1);
}

//
// whole stylesheet
//
CSSNode styleSheet() #Root : {}
{
try{
  ( <S> | <CDO> | <CDC> )*
  ( LOOKAHEAD( <CHARSET_SYM> )
    charsetRule()
    ( <S> | <CDO> | <CDC> )*
  )?
  ( LOOKAHEAD( <IMPORT_SYM> )
    importRule()
    ( <S> | <CDO> | <CDC> )*
  )*
  ( LOOKAHEAD( <NAMESPACE_SYM> )
    namespaceRule()
    ( <S> | <CDO> | <CDC> )*
  )*
  ( ( styleRule()
    | mediaRule()
    | pageRule()
    | unknownRule()
    | charsetRule() { errorUnexpectedRule ("@charset", "charset rule in the middle of the file is not allowed!"); }
    | importRule() { errorUnexpectedRule ("@import", "import rule in the middle of the file is not allowed!"); }
    | namespaceRule() { errorUnexpectedRule ("@namespace", "namespace rule in the middle of the file is not allowed!"); }
    )
    ( <S> | <CDO> | <CDC> )*
// ignore too many closing brackets
    ( <RBRACE> 
      ( <S> | <CDO> | <CDC> )*
    )* 
  )*
  <EOF>
} catch (ParseEOFException ex) {
  if (m_bBrowserCompliantMode) {
    /* ignore special EOF excpetion */
  }
  else
    throw ex;  
}
  { return jjtThis; }
}

//
// Generic utility rules
//
String string() #void : {}
{
  ( <STRING1> { return token.image; }
  | <STRING2> { return token.image; }
  )
}

String anyIdentifier() #void : {}
{
  ( <IDENT>    { return token.image; }
  | <INHERIT>  { return token.image; }
  )
}

void url() : {}
{
  <URL>  { jjtThis.setText (token.image); } 
}

void function() : 
{ String sPlain; }
{
  ( <FUNCTION> { jjtThis.setText (token.image + ")"); }
    ( <S> )*
    // Support functions without parameters (e.g. "gray ()")
    ( expr() )?
    <RROUND>
  | <FUNCTION_EXPRESSION> { jjtThis.setText (token.image); }
    // get content of all skipped chars 
    sPlain = javaSkipToClosingParantheses() { jjtThis.appendText (sPlain); }
  )
}

String unaryOperator() #void : {}
{
  ( <MINUS> { return "-"; }
  | <PLUS>  { return "+"; }
  )
}

Token dimension() #void :
{ Token t; }
{
  ( t = <EM>          
  | t = <EX>          
  | t = <PX>          
  | t = <LENGTH_CM>   
  | t = <LENGTH_MM>   
  | t = <LENGTH_IN>   
  | t = <LENGTH_PT>   
  | t = <LENGTH_PC>   
  | t = <ANGLE_DEG>   
  | t = <ANGLE_RAD>   
  | t = <ANGLE_GRAD>  
  | t = <TIME_MS>     
  | t = <TIME_S>      
  | t = <FREQ_HZ>     
  | t = <FREQ_KHZ>
  )
  { return t; }   
}

void exprTerm() :
{
  String sPrefix = null;
  Token t = null;
}
{
  ( ( sPrefix = unaryOperator() )?
    ( t = <NUMBER>
    | t = <PERCENTAGE>
    | t = dimension()
    )
  | sPrefix = string()
  | t = <IDENT>
  | url()
  | t = <HASH>
  | function()
  | t = <DIMENSION>
  | t = <INHERIT>
  )
  ( <S> )*
  {
    if (sPrefix != null)
      jjtThis.appendText (sPrefix);
    if (t != null)
      jjtThis.appendText (t.image);
  }
}

void exprOperator() : {}
{
  ( <SLASH>  ( <S> )* { jjtThis.setText ("/"); }
  | <COMMA>  ( <S> )* { jjtThis.setText (","); }
  /* Extension for Microsoft filters (alpha=50) */
  | <EQUALS> ( <S> )* { jjtThis.setText ("="); }
  )
}

void expr() : {}
{
  exprTerm()
  ( ( exprOperator() )?
    exprTerm()
  )*
}

//
// Charset rule
//
void charsetRule() :
{ String sStr; }
{
  <CHARSET_SYM>
  ( <S> )+
  sStr = string() { jjtThis.setText (sStr); }
  ( <S> )*
  <SEMICOLON>
}

//
// Import rule
//
void importRule() :
{ String sUrl; }
{
  <IMPORT_SYM>
  ( <S> )*
  ( sUrl = string() { jjtThis.setText (sUrl); }
  | url()
  )
  ( <S> )*
  ( mediaList() )?
  <SEMICOLON>
}

//
// Namespace rule
//
void namespaceRulePrefix() : {}
{
  <IDENT> { jjtThis.setText (token.image); }
} 

void namespaceRuleURL() : 
{ String s; }
{
  // URL tokens are always passed without the quotes!
  ( <URL>        { jjtThis.setText (token.image); }
  | s = string() { jjtThis.setText (CSSParseHelper.unescapeURL (s)); }
  )
} 

void namespaceRule() : {}
{
  <NAMESPACE_SYM>
  ( <S> )*
  ( namespaceRulePrefix()
    ( <S> )* 
  )?
  namespaceRuleURL()
  ( <S> )*
  <SEMICOLON>
} 

//
// Style rule
//
void namespacePrefix() : {}
{
  ( <IDENT>    { jjtThis.setText (token.image); }
  | <ASTERISK> { jjtThis.setText (token.image); }
  )?    
  <DASH>        { jjtThis.appendText ("|"); }
}

void elementName() : {}
{
  ( <IDENT>    { jjtThis.setText (token.image); }
  | <ASTERISK> { jjtThis.setText (token.image); }
  )
}

void typeSelector() #void : {}
{
  ( LOOKAHEAD(2)
    namespacePrefix()
  )?
  elementName()
}

void hash() : {}
{
  <HASH> { jjtThis.setText (token.image); }
}

void _class() #Class : 
{ String sIdentifier; }
{
  <DOT>
  sIdentifier = anyIdentifier() { jjtThis.setText ("." + sIdentifier); }
}

void attribOperator() : {}
{
  ( <EQUALS>         { jjtThis.setText ("=");  }
  | <INCLUDES>       { jjtThis.setText ("~="); }
  | <DASHMATCH>      { jjtThis.setText ("|="); }
  )
}

void attribValue() :
{ String sStr; }
{
  ( <IDENT>         { jjtThis.setText (token.image); }
  | sStr = string() { jjtThis.setText (sStr); }
  )
}

void attrib() : {}
{
  <LSQUARE>
  ( <S> )*
  ( LOOKAHEAD(2)
    namespacePrefix() 
  )?
  <IDENT> { jjtThis.setText (token.image); }
  /* Hack for html[xmlns*=""] */
  ( <ASTERISK> { jjtThis.appendText ("*"); } )?          
  ( <S> )*
  ( attribOperator()
    ( <S> )*
    attribValue()
    ( <S> )*
  )?
  <RSQUARE>
}

void pseudo() : {}
{
  <COLON> { jjtThis.setText (":"); }
  /* Extension for "::-moz-selection */
  ( <COLON> { jjtThis.appendText (":"); } ) ?
  ( LOOKAHEAD(2)
    <FUNCTION> { jjtThis.appendText (token.image); }
    ( <S> )*
    ( expr() )?
    <RROUND>  // do not append because of expression!
  | <IDENT> { jjtThis.appendText (token.image); }
  )
}

void simpleSelectorSequence() #void : {}
{
  LOOKAHEAD(2)
  ( typeSelector()
    ( hash()
    | _class()
    | attrib()
    | pseudo()
    )*
  )
  | ( hash()
    | _class()
    | attrib()
    | pseudo()
    )+
}

void selectorCombinator() : {}
{
  ( LOOKAHEAD(2)
    ( <S> )* 
    <PLUS>       { jjtThis.setText ("+"); }
  | LOOKAHEAD(2)
    ( <S> )* 
    <GREATER>    { jjtThis.setText (">"); }
  | <S>          { jjtThis.setText (" "); }
  )
}

void selector() : {}
{
  simpleSelectorSequence()
  ( LOOKAHEAD(3)
    selectorCombinator()
    ( <S> )*
    simpleSelectorSequence()
  )*
}

void property() : {}
{
  <IDENT> { jjtThis.setText (token.image); }
  ( <S> )*
}

void important() : {}
{
  <IMPORTANT_SYM> { jjtThis.setText (token.image); }
  ( <S> )*
}

void styleDeclaration() : {}
{
try{
  property()
  <COLON>
  ( <S> )*
  /* Was before version 4 optional ->
     to handle e.g. "background-color:;"
     Rule: ( expr() )? */
  expr()
  ( important() )?
} catch (ParseException ex) {
  if (m_bBrowserCompliantMode)
    browserCompliantSkipDecl ();
  else  
    throw ex;
}
}

CSSNode styleDeclarationList() : {}
{
  ( <S> )*
  ( styleDeclaration() )?
  ( <SEMICOLON>
    ( <S> )*
    ( styleDeclaration() )?
  )*
  { return jjtThis; }
}

void styleDeclarationBlock() #void : {}
{
  <LBRACE>
try{
  styleDeclarationList()
  <RBRACE>
} catch (ParseException ex) {
  if (m_bBrowserCompliantMode)
    browserCompliantSkip ();
  else  
    errorSkipTo (ex, RBRACE);
}
}

void styleRule() : {}
{
  selector ()
  ( <S> )*
  ( <COMMA>
    ( <S> )*
    selector()
    ( <S> )*
  )*
  styleDeclarationBlock()
}

//
// Media rule
//
void medium() : {}
{
  <IDENT> { jjtThis.setText (token.image); }
}

void mediaList() : {}
{
  medium()
  ( <S> )*
  ( <COMMA>
    ( <S> )*
    medium()
    ( <S> )*
  )*
}

void mediaRuleList() #void : {}
{
  ( ( styleRule()
    | pageRule()
    | unknownRule()
    | charsetRule() { errorUnexpectedRule ("@charset", "charset rule in the middle of a @media rule is not allowed!"); }
    | importRule() { errorUnexpectedRule ("@import", "import rule in the middle of a @media rule is not allowed!"); }
    | namespaceRule() { errorUnexpectedRule ("@namespace", "namespace rule in the middle of a @media rule is not allowed!"); }
    | mediaRule() { errorUnexpectedRule ("@media", "media rule in the middle of a @media rule is not allowed!"); }
    )
    ( <S> )*
  )+
}

void mediaRule() : {}
{
  <MEDIA_SYM>
  ( <S> )*
  mediaList()
  <LBRACE>
try{
  ( <S> )*
  ( mediaRuleList() )?
  <RBRACE>
} catch (ParseException ex) {
  if (m_bBrowserCompliantMode)
    browserCompliantSkip ();
  else  
    errorSkipTo (ex, RBRACE);
}
}

//
// Page rule
//
void pseudoPage() : {}
{
  <COLON>
  <IDENT> { jjtThis.setText (":" + token.image); }
}

void pageRule() : {}
{
  <PAGE_SYM>
  ( <S> )*
  ( pseudoPage()
    ( <S> )*
  )?
  styleDeclarationBlock()
}

//
// Unknown rule
//
void unknownRuleParameterList() : 
{ String s; }
{
  s = javaSkipToOpeningBrace() { jjtThis.setText (s); }
}  

void unknownRuleBody() : 
{ String s; }
{
  s = javaSkipToClosingBrace() { jjtThis.setText (s); }
}

// Any unsupported rule
void unknownRule() : {}
{
  <AT_UNKNOWN> { jjtThis.setText (token.image); }
  unknownRuleParameterList()
  unknownRuleBody()
  // Manually switch from IN_UNKNOWN_RULE to DEFAULT again
  { token_source.SwitchTo (DEFAULT); }
}

//
// Error handling
// 
void invalid () : {}
{
  ( <INVALID_STRING1>
  | <INVALID_STRING2>
  )
}
