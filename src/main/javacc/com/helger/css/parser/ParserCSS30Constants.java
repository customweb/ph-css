/* Generated By:JJTree&JavaCC: Do not edit this line. ParserCSS30Constants.java */
package com.helger.css.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserCSS30Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int S = 4;
  /** RegularExpression Id. */
  int W = 5;
  /** RegularExpression Id. */
  int N = 6;
  /** RegularExpression Id. */
  int ODD = 7;
  /** RegularExpression Id. */
  int EVEN = 8;
  /** RegularExpression Id. */
  int INTEGER = 9;
  /** RegularExpression Id. */
  int PLUS = 10;
  /** RegularExpression Id. */
  int MINUS = 11;
  /** RegularExpression Id. */
  int LROUND = 12;
  /** RegularExpression Id. */
  int RROUND = 13;
  /** RegularExpression Id. */
  int H = 14;
  /** RegularExpression Id. */
  int HNUM = 15;
  /** RegularExpression Id. */
  int NONASCII = 16;
  /** RegularExpression Id. */
  int ESCAPE_UNICODE = 17;
  /** RegularExpression Id. */
  int ESCAPE_OTHER = 18;
  /** RegularExpression Id. */
  int ESCAPE = 19;
  /** RegularExpression Id. */
  int NMSTART = 20;
  /** RegularExpression Id. */
  int NMCHAR = 21;
  /** RegularExpression Id. */
  int STRING_EOL = 22;
  /** RegularExpression Id. */
  int STRING1 = 23;
  /** RegularExpression Id. */
  int STRING2 = 24;
  /** RegularExpression Id. */
  int INVALID_STRING1 = 25;
  /** RegularExpression Id. */
  int INVALID_STRING2 = 26;
  /** RegularExpression Id. */
  int NAME = 27;
  /** RegularExpression Id. */
  int NUM = 28;
  /** RegularExpression Id. */
  int URLCHAR = 29;
  /** RegularExpression Id. */
  int URANGE_H = 30;
  /** RegularExpression Id. */
  int URANGE_PLACEHOLDER = 31;
  /** RegularExpression Id. */
  int NUMBER = 32;
  /** RegularExpression Id. */
  int LBRACE = 33;
  /** RegularExpression Id. */
  int RBRACE = 34;
  /** RegularExpression Id. */
  int LSQUARE = 35;
  /** RegularExpression Id. */
  int RSQUARE = 36;
  /** RegularExpression Id. */
  int DOT = 37;
  /** RegularExpression Id. */
  int COMMA = 38;
  /** RegularExpression Id. */
  int SEMICOLON = 39;
  /** RegularExpression Id. */
  int COLON = 40;
  /** RegularExpression Id. */
  int ASTERISK = 41;
  /** RegularExpression Id. */
  int SLASH = 42;
  /** RegularExpression Id. */
  int EQUALS = 43;
  /** RegularExpression Id. */
  int DASH = 44;
  /** RegularExpression Id. */
  int GREATER = 45;
  /** RegularExpression Id. */
  int TILDE = 46;
  /** RegularExpression Id. */
  int HASH = 47;
  /** RegularExpression Id. */
  int INCLUDES = 48;
  /** RegularExpression Id. */
  int DASHMATCH = 49;
  /** RegularExpression Id. */
  int PREFIXMATCH = 50;
  /** RegularExpression Id. */
  int SUBFIXMATCH = 51;
  /** RegularExpression Id. */
  int SUBSTRINGMATCH = 52;
  /** RegularExpression Id. */
  int CDO = 53;
  /** RegularExpression Id. */
  int CDC = 54;
  /** RegularExpression Id. */
  int CHARSET_SYM = 55;
  /** RegularExpression Id. */
  int IMPORT_SYM = 56;
  /** RegularExpression Id. */
  int NAMESPACE_SYM = 57;
  /** RegularExpression Id. */
  int PAGE_SYM = 58;
  /** RegularExpression Id. */
  int MEDIA_SYM = 59;
  /** RegularExpression Id. */
  int FONTFACE_SYM = 60;
  /** RegularExpression Id. */
  int KEYFRAMES_SYM = 61;
  /** RegularExpression Id. */
  int VIEWPORT_SYM = 62;
  /** RegularExpression Id. */
  int SUPPORTS_SYM = 63;
  /** RegularExpression Id. */
  int AT_UNKNOWN = 64;
  /** RegularExpression Id. */
  int IMPORTANT_SYM = 65;
  /** RegularExpression Id. */
  int INHERIT = 66;
  /** RegularExpression Id. */
  int AND_SYM = 67;
  /** RegularExpression Id. */
  int NOT_SYM = 68;
  /** RegularExpression Id. */
  int ONLY_SYM = 69;
  /** RegularExpression Id. */
  int FROM_SYM = 70;
  /** RegularExpression Id. */
  int TO_SYM = 71;
  /** RegularExpression Id. */
  int OR_SYM = 72;
  /** RegularExpression Id. */
  int IDENT = 73;
  /** RegularExpression Id. */
  int EM = 74;
  /** RegularExpression Id. */
  int EX = 75;
  /** RegularExpression Id. */
  int PX = 76;
  /** RegularExpression Id. */
  int REM = 77;
  /** RegularExpression Id. */
  int VW = 78;
  /** RegularExpression Id. */
  int VH = 79;
  /** RegularExpression Id. */
  int VMIN = 80;
  /** RegularExpression Id. */
  int CH = 81;
  /** RegularExpression Id. */
  int DPI = 82;
  /** RegularExpression Id. */
  int DPCM = 83;
  /** RegularExpression Id. */
  int DPPX = 84;
  /** RegularExpression Id. */
  int LENGTH_CM = 85;
  /** RegularExpression Id. */
  int LENGTH_MM = 86;
  /** RegularExpression Id. */
  int LENGTH_IN = 87;
  /** RegularExpression Id. */
  int LENGTH_PT = 88;
  /** RegularExpression Id. */
  int LENGTH_PC = 89;
  /** RegularExpression Id. */
  int ANGLE_DEG = 90;
  /** RegularExpression Id. */
  int ANGLE_RAD = 91;
  /** RegularExpression Id. */
  int ANGLE_GRAD = 92;
  /** RegularExpression Id. */
  int ANGLE_TURN = 93;
  /** RegularExpression Id. */
  int TIME_MS = 94;
  /** RegularExpression Id. */
  int TIME_S = 95;
  /** RegularExpression Id. */
  int FREQ_HZ = 96;
  /** RegularExpression Id. */
  int FREQ_KHZ = 97;
  /** RegularExpression Id. */
  int PERCENTAGE = 98;
  /** RegularExpression Id. */
  int URL_CONTENT = 99;
  /** RegularExpression Id. */
  int URL = 100;
  /** RegularExpression Id. */
  int FUNCTION_CALC = 101;
  /** RegularExpression Id. */
  int FUNCTION_NOT = 102;
  /** RegularExpression Id. */
  int FUNCTION_NTH = 103;
  /** RegularExpression Id. */
  int FUNCTION_EXPRESSION = 104;
  /** RegularExpression Id. */
  int FUNCTION = 105;
  /** RegularExpression Id. */
  int URANGE = 106;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 107;
  /** RegularExpression Id. */
  int UNKNOWN = 108;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;
  /** Lexical state. */
  int IN_NTH = 2;
  /** Lexical state. */
  int IN_UNKNOWN_RULE = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"/*\"",
    "<token of kind 2>",
    "\"*/\"",
    "<S>",
    "<W>",
    "\"n\"",
    "\"odd\"",
    "\"even\"",
    "<INTEGER>",
    "\"+\"",
    "\"-\"",
    "\"(\"",
    "\")\"",
    "<H>",
    "<HNUM>",
    "<NONASCII>",
    "<ESCAPE_UNICODE>",
    "<ESCAPE_OTHER>",
    "<ESCAPE>",
    "<NMSTART>",
    "<NMCHAR>",
    "<STRING_EOL>",
    "<STRING1>",
    "<STRING2>",
    "<INVALID_STRING1>",
    "<INVALID_STRING2>",
    "<NAME>",
    "<NUM>",
    "<URLCHAR>",
    "<URANGE_H>",
    "<URANGE_PLACEHOLDER>",
    "<NUMBER>",
    "<LBRACE>",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "<COMMA>",
    "\";\"",
    "\":\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"|\"",
    "\">\"",
    "\"~\"",
    "<HASH>",
    "\"~=\"",
    "\"|=\"",
    "\"^=\"",
    "\"$=\"",
    "\"*=\"",
    "\"<!--\"",
    "\"-->\"",
    "\"@charset\"",
    "\"@import\"",
    "\"@namespace\"",
    "\"@page\"",
    "\"@media\"",
    "\"@font-face\"",
    "<KEYFRAMES_SYM>",
    "<VIEWPORT_SYM>",
    "\"@supports\"",
    "<AT_UNKNOWN>",
    "<IMPORTANT_SYM>",
    "\"inherit\"",
    "\"and\"",
    "\"not\"",
    "\"only\"",
    "\"from\"",
    "\"to\"",
    "\"or\"",
    "<IDENT>",
    "<EM>",
    "<EX>",
    "<PX>",
    "<REM>",
    "<VW>",
    "<VH>",
    "<VMIN>",
    "<CH>",
    "<DPI>",
    "<DPCM>",
    "<DPPX>",
    "<LENGTH_CM>",
    "<LENGTH_MM>",
    "<LENGTH_IN>",
    "<LENGTH_PT>",
    "<LENGTH_PC>",
    "<ANGLE_DEG>",
    "<ANGLE_RAD>",
    "<ANGLE_GRAD>",
    "<ANGLE_TURN>",
    "<TIME_MS>",
    "<TIME_S>",
    "<FREQ_HZ>",
    "<FREQ_KHZ>",
    "<PERCENTAGE>",
    "<URL_CONTENT>",
    "<URL>",
    "<FUNCTION_CALC>",
    "\":not(\"",
    "<FUNCTION_NTH>",
    "\"expression(\"",
    "<FUNCTION>",
    "<URANGE>",
    "<SINGLE_LINE_COMMENT>",
    "<UNKNOWN>",
  };

}
