/* ParserCSS30.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. ParserCSS30.java */
package com.helger.css.parser;

public class ParserCSS30 extends com.helger.css.parser.AbstractParserCSS/*@bgen(jjtree)*/implements ParserCSS30TreeConstants, ParserCSS30Constants {/*@bgen(jjtree)*/
  protected JJTParserCSS30State jjtree = new JJTParserCSS30State();private static final org.slf4j.Logger s_aLogger = org.slf4j.LoggerFactory.getLogger (ParserCSS30.class);

  // Used when NODE_SCOPE_HOOK is true - for debugging only
  // Package scope to avoid warning when NODE_SCOPE_HOOK is false
  void jjtreeOpenNodeScope (final Node aNode)
  {
    if (s_aLogger.isDebugEnabled ())
      s_aLogger.debug ("Opening scope for " + aNode.toString ());
  }

  void jjtreeCloseNodeScope (final Node aNode)
  {
    if (s_aLogger.isDebugEnabled ())
      s_aLogger.debug ("Closing scope for " + aNode.toString ());
  }

  private void errorUnexpectedRule(final String sRule, final String sMsg) throws ParseException {if (m_aCustomErrorHandler != null)
    m_aCustomErrorHandler.onCSSUnexpectedRule (token, sRule, sMsg);
  else
    s_aLogger.warn("[" + token.beginLine + ":" + token.beginColumn + "] Unexpected rule '" + sRule + "': " + sMsg);
  }

  private Token errorSkipTo(final ParseException ex, final int... aKinds) throws ParseException, ParseException {/*@bgen(jjtree) errorSkipTo */
com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTERRORSKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
jjtn000.jjtSetFirstToken(getToken(1));
try {// Skip until (including) the first matching token
  Token tok;
  do
  {
    tok = getNextToken();
    if (tok.kind == EOF)
    {
      // Encountered EOF while skipping - throw the original exception!
      throw ex;
    }
  } while (!com.helger.commons.collection.ArrayHelper.contains (aKinds, tok.kind));

  if (s_aLogger.isDebugEnabled ())
    s_aLogger.debug ("Skipped until token " + tok.toString ());

  if (m_aCustomErrorHandler != null)
    m_aCustomErrorHandler.onCSSParseError (ex.currentToken, ex.expectedTokenSequences, ex.tokenImage, tok);
  else
    s_aLogger.warn("CSS recoverable parse error", ex);
  return tok;/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
}
  }

  private String javaSkipToClosingParantheses() throws ParseException, ParseException {final StringBuilder aSB = new StringBuilder ();
  int nNesting = 1;
  while (true) {
    final Token tok = getNextToken();
    aSB.append (tok.image);
    if (tok.kind == LROUND)
      nNesting++;
    else
      if (tok.kind == RROUND) {
        nNesting--;
        if (nNesting == 0)
          break;
      }
      else {
        if (tok.kind == EOF)
          throw new ParseEOFException ("EOF while searching for matching closing ')'.");
        // Sometimes token images contain parenthesis
        nNesting += com.helger.commons.string.StringHelper.getCharCount (tok.image, '(');
        nNesting -= com.helger.commons.string.StringHelper.getCharCount (tok.image, ')');
      }
  }
  return aSB.toString ();
  }

  private String javaSkipToOpeningBrace() throws ParseException, ParseException {final StringBuilder aSB = new StringBuilder ();
  Token tok;
  while (true) {
    tok = getNextToken();
    if (tok.kind == EOF)
      throw new ParseEOFException ("EOF while searching for opening '{'.");
    if (tok.kind == LBRACE)
      break;
    aSB.append (tok.image);
  }
  return aSB.toString ();
  }

  private String javaSkipToClosingBrace() throws ParseException, ParseEOFException {final StringBuilder aSB = new StringBuilder ();
  int nNesting = 1;
  while (true) {
    final Token tok = getNextToken();
    if (tok.kind == LBRACE)
      nNesting++;
    else
      if (tok.kind == RBRACE) {
        nNesting--;
        if (nNesting == 0)
          break;
      }
      else {
        if (tok.kind == EOF)
          throw new ParseEOFException ("EOF while searching for matching closing '}'.");
        // Token images never contain brackets
      }
    aSB.append (tok.image);
  }
  // System.out.println ("SKIPPED1: '" + aSB + "'");
  return aSB.toString ();
  }

  private String javaSkipToClosingBraceOrSemicolon() throws ParseException, ParseEOFException {final StringBuilder aSB = new StringBuilder ();
  int nNesting = 1;
  while (true) {
    final Token tok = getNextToken();
    if (tok.kind == LBRACE)
      nNesting++;
    else
      if (tok.kind == RBRACE) {
        nNesting--;
        if (nNesting == 0)
          break;
      }
      else
        if (tok.kind == SEMICOLON) {
          if (nNesting == 1)
            break;
        }
        else {
          if (tok.kind == EOF)
            throw new ParseEOFException ("EOF while searching for matching closing '}' or ';'.");
          // Token images never contain brackets
        }
    aSB.append (tok.image);
  }
  // System.out.println ("SKIPPED2: '" + aSB + "'");
  return aSB.toString ();
  }

  private void browserCompliantSkip() throws ParseException, ParseEOFException {javaSkipToClosingBrace ();
  // push back last token!
  token_source.backup(1);
  }

  private void browserCompliantSkipDecl() throws ParseException, ParseEOFException {javaSkipToClosingBraceOrSemicolon ();
  // push back last token!
  token_source.backup(1);
  }

//
// whole stylesheet
//
  final public CSSNode styleSheet() throws ParseException {/*@bgen(jjtree) Root */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      try {
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:
          case CDO:
          case CDC:{
            ;
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            jj_consume_token(S);
            break;
            }
          case CDO:{
            jj_consume_token(CDO);
            break;
            }
          case CDC:{
            jj_consume_token(CDC);
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        if (jj_2_1(2147483647)) {
          charsetRule();
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:
            case CDO:
            case CDC:{
              ;
              break;
              }
            default:
              jj_la1[2] = jj_gen;
              break label_2;
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:{
              jj_consume_token(S);
              break;
              }
            case CDO:{
              jj_consume_token(CDO);
              break;
              }
            case CDC:{
              jj_consume_token(CDC);
              break;
              }
            default:
              jj_la1[3] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        } else {
          ;
        }
        label_3:
        while (true) {
          if (jj_2_2(2147483647)) {
            ;
          } else {
            break label_3;
          }
          importRule();
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:
            case CDO:
            case CDC:{
              ;
              break;
              }
            default:
              jj_la1[4] = jj_gen;
              break label_4;
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:{
              jj_consume_token(S);
              break;
              }
            case CDO:{
              jj_consume_token(CDO);
              break;
              }
            case CDC:{
              jj_consume_token(CDC);
              break;
              }
            default:
              jj_la1[5] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        label_5:
        while (true) {
          if (jj_2_3(2147483647)) {
            ;
          } else {
            break label_5;
          }
          namespaceRule();
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:
            case CDO:
            case CDC:{
              ;
              break;
              }
            default:
              jj_la1[6] = jj_gen;
              break label_6;
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:{
              jj_consume_token(S);
              break;
              }
            case CDO:{
              jj_consume_token(CDO);
              break;
              }
            case CDC:{
              jj_consume_token(CDC);
              break;
              }
            default:
              jj_la1[7] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LSQUARE:
          case DOT:
          case COLON:
          case ASTERISK:
          case DASH:
          case HASH:
          case CHARSET_SYM:
          case IMPORT_SYM:
          case NAMESPACE_SYM:
          case PAGE_SYM:
          case MEDIA_SYM:
          case FONTFACE_SYM:
          case KEYFRAMES_SYM:
          case VIEWPORT_SYM:
          case SUPPORTS_SYM:
          case AT_UNKNOWN:
          case IDENT:
          case PERCENTAGE:
          case FUNCTION_NOT:{
            ;
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            break label_7;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LSQUARE:
          case DOT:
          case COLON:
          case ASTERISK:
          case DASH:
          case HASH:
          case IDENT:
          case PERCENTAGE:
          case FUNCTION_NOT:{
            styleRule();
            break;
            }
          case MEDIA_SYM:{
            mediaRule();
            break;
            }
          case PAGE_SYM:{
            pageRule();
            break;
            }
          case FONTFACE_SYM:{
            fontfaceRule();
            break;
            }
          case KEYFRAMES_SYM:{
            keyframesRule();
            break;
            }
          case VIEWPORT_SYM:{
            viewportRule();
            break;
            }
          case SUPPORTS_SYM:{
            supportsRule();
            break;
            }
          case AT_UNKNOWN:{
            unknownRule();
            break;
            }
          case CHARSET_SYM:{
            charsetRule();
errorUnexpectedRule ("@charset", "charset rule in the middle of the file is not allowed!");
            break;
            }
          case IMPORT_SYM:{
            importRule();
errorUnexpectedRule ("@import", "import rule in the middle of the file is not allowed!");
            break;
            }
          case NAMESPACE_SYM:{
            namespaceRule();
errorUnexpectedRule ("@namespace", "namespace rule in the middle of the file is not allowed!");
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:
            case CDO:
            case CDC:{
              ;
              break;
              }
            default:
              jj_la1[10] = jj_gen;
              break label_8;
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:{
              jj_consume_token(S);
              break;
              }
            case CDO:{
              jj_consume_token(CDO);
              break;
              }
            case CDC:{
              jj_consume_token(CDC);
              break;
              }
            default:
              jj_la1[11] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          label_9:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case RBRACE:{
              ;
              break;
              }
            default:
              jj_la1[12] = jj_gen;
              break label_9;
            }
            jj_consume_token(RBRACE);
            label_10:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case S:
              case CDO:
              case CDC:{
                ;
                break;
                }
              default:
                jj_la1[13] = jj_gen;
                break label_10;
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case S:{
                jj_consume_token(S);
                break;
                }
              case CDO:{
                jj_consume_token(CDO);
                break;
                }
              case CDC:{
                jj_consume_token(CDC);
                break;
                }
              default:
                jj_la1[14] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
        jj_consume_token(0);
      } catch (ParseEOFException ex) {
if (m_bBrowserCompliantMode) {
    /* ignore special EOF excpetion */
  }
  else
    {if (true) throw ex;}
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
    }
    throw new Error("Missing return statement in function");
  }

//
// Generic utility rules
//
  final public String string() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING1:{
      jj_consume_token(STRING1);
{if ("" != null) return token.image;}
      break;
      }
    case STRING2:{
      jj_consume_token(STRING2);
{if ("" != null) return token.image;}
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String anyIdentifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENT:{
      jj_consume_token(IDENT);
{if ("" != null) return token.image;}
      break;
      }
    case INHERIT:{
      jj_consume_token(INHERIT);
{if ("" != null) return token.image;}
      break;
      }
    case AND_SYM:{
      jj_consume_token(AND_SYM);
{if ("" != null) return token.image;}
      break;
      }
    case NOT_SYM:{
      jj_consume_token(NOT_SYM);
{if ("" != null) return token.image;}
      break;
      }
    case ONLY_SYM:{
      jj_consume_token(ONLY_SYM);
{if ("" != null) return token.image;}
      break;
      }
    case FROM_SYM:{
      jj_consume_token(FROM_SYM);
{if ("" != null) return token.image;}
      break;
      }
    case TO_SYM:{
      jj_consume_token(TO_SYM);
{if ("" != null) return token.image;}
      break;
      }
    case OR_SYM:{
      jj_consume_token(OR_SYM);
{if ("" != null) return token.image;}
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void url() throws ParseException {/*@bgen(jjtree) url */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTURL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(URL);
jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (token.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void function() throws ParseException {/*@bgen(jjtree) function */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String sPlain;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FUNCTION:{
        jj_consume_token(FUNCTION);
jjtn000.setText (token.image + ")");
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[17] = jj_gen;
            break label_11;
          }
          jj_consume_token(S);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:
        case STRING1:
        case STRING2:
        case NUMBER:
        case HASH:
        case INHERIT:
        case FROM_SYM:
        case TO_SYM:
        case IDENT:
        case EM:
        case EX:
        case PX:
        case REM:
        case VW:
        case VH:
        case VMIN:
        case CH:
        case DPI:
        case DPCM:
        case DPPX:
        case LENGTH_CM:
        case LENGTH_MM:
        case LENGTH_IN:
        case LENGTH_PT:
        case LENGTH_PC:
        case ANGLE_DEG:
        case ANGLE_RAD:
        case ANGLE_GRAD:
        case ANGLE_TURN:
        case TIME_MS:
        case TIME_S:
        case FREQ_HZ:
        case FREQ_KHZ:
        case PERCENTAGE:
        case URL:
        case FUNCTION_CALC:
        case FUNCTION_EXPRESSION:
        case FUNCTION:
        case URANGE:{
          expr();
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        jj_consume_token(RROUND);
        break;
        }
      case FUNCTION_EXPRESSION:{
        jj_consume_token(FUNCTION_EXPRESSION);
jjtn000.setText (token.image);
        // get content of all skipped chars 
            sPlain = javaSkipToClosingParantheses();
jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.appendText (sPlain);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public String unaryOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:{
      jj_consume_token(MINUS);
{if ("" != null) return "-";}
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
{if ("" != null) return "+";}
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Token dimension() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EM:{
      t = jj_consume_token(EM);
      break;
      }
    case EX:{
      t = jj_consume_token(EX);
      break;
      }
    case PX:{
      t = jj_consume_token(PX);
      break;
      }
    case REM:{
      t = jj_consume_token(REM);
      break;
      }
    case VW:{
      t = jj_consume_token(VW);
      break;
      }
    case VH:{
      t = jj_consume_token(VH);
      break;
      }
    case VMIN:{
      t = jj_consume_token(VMIN);
      break;
      }
    case CH:{
      t = jj_consume_token(CH);
      break;
      }
    case DPI:{
      t = jj_consume_token(DPI);
      break;
      }
    case DPCM:{
      t = jj_consume_token(DPCM);
      break;
      }
    case DPPX:{
      t = jj_consume_token(DPPX);
      break;
      }
    case LENGTH_CM:{
      t = jj_consume_token(LENGTH_CM);
      break;
      }
    case LENGTH_MM:{
      t = jj_consume_token(LENGTH_MM);
      break;
      }
    case LENGTH_IN:{
      t = jj_consume_token(LENGTH_IN);
      break;
      }
    case LENGTH_PT:{
      t = jj_consume_token(LENGTH_PT);
      break;
      }
    case LENGTH_PC:{
      t = jj_consume_token(LENGTH_PC);
      break;
      }
    case ANGLE_DEG:{
      t = jj_consume_token(ANGLE_DEG);
      break;
      }
    case ANGLE_RAD:{
      t = jj_consume_token(ANGLE_RAD);
      break;
      }
    case ANGLE_GRAD:{
      t = jj_consume_token(ANGLE_GRAD);
      break;
      }
    case ANGLE_TURN:{
      t = jj_consume_token(ANGLE_TURN);
      break;
      }
    case TIME_MS:{
      t = jj_consume_token(TIME_MS);
      break;
      }
    case TIME_S:{
      t = jj_consume_token(TIME_S);
      break;
      }
    case FREQ_HZ:{
      t = jj_consume_token(FREQ_HZ);
      break;
      }
    case FREQ_KHZ:{
      t = jj_consume_token(FREQ_KHZ);
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void mathUnit() throws ParseException {/*@bgen(jjtree) mathUnit */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTMATHUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String sPrefix = null;
  Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        sPrefix = unaryOperator();
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        t = jj_consume_token(NUMBER);
        break;
        }
      case PERCENTAGE:{
        t = jj_consume_token(PERCENTAGE);
        break;
        }
      case EM:
      case EX:
      case PX:
      case REM:
      case VW:
      case VH:
      case VMIN:
      case CH:
      case DPI:
      case DPCM:
      case DPPX:
      case LENGTH_CM:
      case LENGTH_MM:
      case LENGTH_IN:
      case LENGTH_PT:
      case LENGTH_PC:
      case ANGLE_DEG:
      case ANGLE_RAD:
      case ANGLE_GRAD:
      case ANGLE_TURN:
      case TIME_MS:
      case TIME_S:
      case FREQ_HZ:
      case FREQ_KHZ:{
        t = dimension();
        break;
        }
      case LROUND:{
        jj_consume_token(LROUND);
        label_12:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            break label_12;
          }
          jj_consume_token(S);
        }
        mathSum();
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[24] = jj_gen;
            break label_13;
          }
          jj_consume_token(S);
        }
        jj_consume_token(RROUND);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
if (sPrefix != null)
      jjtn000.appendText (sPrefix);
    if (t != null)
      jjtn000.appendText (t.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void mathProductOperator() throws ParseException {/*@bgen(jjtree) mathProductOperator */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTMATHPRODUCTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASTERISK:{
        jj_consume_token(ASTERISK);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText ("*");
        break;
        }
      case SLASH:{
        jj_consume_token(SLASH);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText ("/");
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void mathProduct() throws ParseException {/*@bgen(jjtree) mathProduct */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTMATHPRODUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      mathUnit();
      label_14:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_14;
        }
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[27] = jj_gen;
            break label_15;
          }
          jj_consume_token(S);
        }
        mathProductOperator();
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[28] = jj_gen;
            break label_16;
          }
          jj_consume_token(S);
        }
        mathUnit();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void mathSumOperator() throws ParseException {/*@bgen(jjtree) mathSumOperator */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTMATHSUMOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText ("+");
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText ("-");
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void mathSum() throws ParseException {
    mathProduct();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S:{
        ;
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        break label_17;
      }
      jj_consume_token(S);
      mathSumOperator();
      jj_consume_token(S);
      mathProduct();
    }
  }

  final public void math() throws ParseException {/*@bgen(jjtree) math */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTMATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FUNCTION_CALC);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[31] = jj_gen;
          break label_18;
        }
        jj_consume_token(S);
      }
      mathSum();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          break label_19;
        }
        jj_consume_token(S);
      }
      jj_consume_token(RROUND);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void exprTerm() throws ParseException {/*@bgen(jjtree) exprTerm */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTEXPRTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String sPrefix = null;
  Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:
      case NUMBER:
      case EM:
      case EX:
      case PX:
      case REM:
      case VW:
      case VH:
      case VMIN:
      case CH:
      case DPI:
      case DPCM:
      case DPPX:
      case LENGTH_CM:
      case LENGTH_MM:
      case LENGTH_IN:
      case LENGTH_PT:
      case LENGTH_PC:
      case ANGLE_DEG:
      case ANGLE_RAD:
      case ANGLE_GRAD:
      case ANGLE_TURN:
      case TIME_MS:
      case TIME_S:
      case FREQ_HZ:
      case FREQ_KHZ:
      case PERCENTAGE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:{
          sPrefix = unaryOperator();
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMBER:{
          t = jj_consume_token(NUMBER);
          break;
          }
        case PERCENTAGE:{
          t = jj_consume_token(PERCENTAGE);
          break;
          }
        case EM:
        case EX:
        case PX:
        case REM:
        case VW:
        case VH:
        case VMIN:
        case CH:
        case DPI:
        case DPCM:
        case DPPX:
        case LENGTH_CM:
        case LENGTH_MM:
        case LENGTH_IN:
        case LENGTH_PT:
        case LENGTH_PC:
        case ANGLE_DEG:
        case ANGLE_RAD:
        case ANGLE_GRAD:
        case ANGLE_TURN:
        case TIME_MS:
        case TIME_S:
        case FREQ_HZ:
        case FREQ_KHZ:{
          t = dimension();
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case STRING1:
      case STRING2:{
        sPrefix = string();
        break;
        }
      case IDENT:{
        t = jj_consume_token(IDENT);
        break;
        }
      case FROM_SYM:{
        t = jj_consume_token(FROM_SYM);
        break;
        }
      case TO_SYM:{
        t = jj_consume_token(TO_SYM);
        break;
        }
      case URL:{
        url();
        break;
        }
      case HASH:{
        t = jj_consume_token(HASH);
        break;
        }
      case FUNCTION_EXPRESSION:
      case FUNCTION:{
        function();
        break;
        }
      case FUNCTION_CALC:{
        math();
        break;
        }
      case INHERIT:{
        t = jj_consume_token(INHERIT);
        break;
        }
      case URANGE:{
        t = jj_consume_token(URANGE);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          break label_20;
        }
        jj_consume_token(S);
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
if (sPrefix != null)
      jjtn000.appendText (sPrefix);
    if (t != null)
      jjtn000.appendText (t.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void exprOperator() throws ParseException {/*@bgen(jjtree) exprOperator */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTEXPROPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SLASH:{
        jj_consume_token(SLASH);
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[37] = jj_gen;
            break label_21;
          }
          jj_consume_token(S);
        }
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText ("/");
        break;
        }
      case COMMA:{
        jj_consume_token(COMMA);
        label_22:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[38] = jj_gen;
            break label_22;
          }
          jj_consume_token(S);
        }
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (",");
        break;
        }
      case EQUALS:{
        jj_consume_token(EQUALS);
        label_23:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[39] = jj_gen;
            break label_23;
          }
          jj_consume_token(S);
        }
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText ("=");
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void expr() throws ParseException {/*@bgen(jjtree) expr */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      exprTerm();
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:
        case STRING1:
        case STRING2:
        case NUMBER:
        case COMMA:
        case SLASH:
        case EQUALS:
        case HASH:
        case INHERIT:
        case FROM_SYM:
        case TO_SYM:
        case IDENT:
        case EM:
        case EX:
        case PX:
        case REM:
        case VW:
        case VH:
        case VMIN:
        case CH:
        case DPI:
        case DPCM:
        case DPPX:
        case LENGTH_CM:
        case LENGTH_MM:
        case LENGTH_IN:
        case LENGTH_PT:
        case LENGTH_PC:
        case ANGLE_DEG:
        case ANGLE_RAD:
        case ANGLE_GRAD:
        case ANGLE_TURN:
        case TIME_MS:
        case TIME_S:
        case FREQ_HZ:
        case FREQ_KHZ:
        case PERCENTAGE:
        case URL:
        case FUNCTION_CALC:
        case FUNCTION_EXPRESSION:
        case FUNCTION:
        case URANGE:{
          ;
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          break label_24;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:
        case SLASH:
        case EQUALS:{
          exprOperator();
          break;
          }
        default:
          jj_la1[42] = jj_gen;
          ;
        }
        exprTerm();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//
// Charset rule
//
  final public void charsetRule() throws ParseException {/*@bgen(jjtree) charsetRule */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTCHARSETRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String sStr;
    try {
      jj_consume_token(CHARSET_SYM);
      label_25:
      while (true) {
        jj_consume_token(S);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          break label_25;
        }
      }
      sStr = string();
jjtn000.setText (sStr);
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          break label_26;
        }
        jj_consume_token(S);
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//
// Import rule
//
  final public void importRule() throws ParseException {/*@bgen(jjtree) importRule */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTIMPORTRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String sUrl;
    try {
      jj_consume_token(IMPORT_SYM);
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          break label_27;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING1:
      case STRING2:{
        sUrl = string();
jjtn000.setText (sUrl);
        break;
        }
      case URL:{
        url();
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[47] = jj_gen;
          break label_28;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LROUND:
      case NOT_SYM:
      case ONLY_SYM:
      case IDENT:{
        mediaList();
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//
// Namespace rule
//
  final public void namespaceRulePrefix() throws ParseException {/*@bgen(jjtree) namespaceRulePrefix */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTNAMESPACERULEPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IDENT);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (token.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void namespaceRuleURL() throws ParseException {/*@bgen(jjtree) namespaceRuleURL */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTNAMESPACERULEURL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String s;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case URL:{
        jj_consume_token(URL);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (token.image);
        break;
        }
      case STRING1:
      case STRING2:{
        s = string();
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (CSSParseHelper.unescapeURL (s));
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void namespaceRule() throws ParseException {/*@bgen(jjtree) namespaceRule */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTNAMESPACERULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(NAMESPACE_SYM);
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[50] = jj_gen;
          break label_29;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENT:{
        namespaceRulePrefix();
        label_30:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[51] = jj_gen;
            break label_30;
          }
          jj_consume_token(S);
        }
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      namespaceRuleURL();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[53] = jj_gen;
          break label_31;
        }
        jj_consume_token(S);
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//
// Style rule
//
  final public void namespacePrefix() throws ParseException {/*@bgen(jjtree) namespacePrefix */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTNAMESPACEPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASTERISK:
      case IDENT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENT:{
          jj_consume_token(IDENT);
jjtn000.setText (token.image);
          break;
          }
        case ASTERISK:{
          jj_consume_token(ASTERISK);
jjtn000.setText (token.image);
          break;
          }
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      jj_consume_token(DASH);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.appendText ("|");
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void elementName() throws ParseException {/*@bgen(jjtree) elementName */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTELEMENTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENT:{
        jj_consume_token(IDENT);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (token.image);
        break;
        }
      case ASTERISK:{
        jj_consume_token(ASTERISK);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (token.image);
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void typeSelector() throws ParseException {
    if (jj_2_5(2)) {
      namespacePrefix();
    } else {
      ;
    }
    elementName();
  }

  final public void hash() throws ParseException {/*@bgen(jjtree) hash */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTHASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(HASH);
jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (token.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void _class() throws ParseException {/*@bgen(jjtree) Class */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String sIdentifier;
    try {
      jj_consume_token(DOT);
      sIdentifier = anyIdentifier();
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText ("." + sIdentifier);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void attribOperator() throws ParseException {/*@bgen(jjtree) attribOperator */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTATTRIBOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:{
        jj_consume_token(EQUALS);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText ("=");
        break;
        }
      case INCLUDES:{
        jj_consume_token(INCLUDES);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText ("~=");
        break;
        }
      case DASHMATCH:{
        jj_consume_token(DASHMATCH);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText ("|=");
        break;
        }
      case PREFIXMATCH:{
        jj_consume_token(PREFIXMATCH);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText ("^=");
        break;
        }
      case SUBFIXMATCH:{
        jj_consume_token(SUBFIXMATCH);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText ("$=");
        break;
        }
      case SUBSTRINGMATCH:{
        jj_consume_token(SUBSTRINGMATCH);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText ("*=");
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void attribValue() throws ParseException {/*@bgen(jjtree) attribValue */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTATTRIBVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String sStr;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENT:{
        jj_consume_token(IDENT);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (token.image);
        break;
        }
      case STRING1:
      case STRING2:{
        sStr = string();
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (sStr);
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void attrib() throws ParseException {/*@bgen(jjtree) attrib */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTATTRIB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LSQUARE);
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[59] = jj_gen;
          break label_32;
        }
        jj_consume_token(S);
      }
      if (jj_2_6(2)) {
        namespacePrefix();
      } else {
        ;
      }
      jj_consume_token(IDENT);
jjtn000.setText (token.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASTERISK:{
        jj_consume_token(ASTERISK);
jjtn000.appendText ("*");
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[61] = jj_gen;
          break label_33;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:
      case INCLUDES:
      case DASHMATCH:
      case PREFIXMATCH:
      case SUBFIXMATCH:
      case SUBSTRINGMATCH:{
        attribOperator();
        label_34:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[62] = jj_gen;
            break label_34;
          }
          jj_consume_token(S);
        }
        attribValue();
        label_35:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[63] = jj_gen;
            break label_35;
          }
          jj_consume_token(S);
        }
        break;
        }
      default:
        jj_la1[64] = jj_gen;
        ;
      }
      jj_consume_token(RSQUARE);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void pseudoNth() throws ParseException {/*@bgen(jjtree) nth */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTNTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t; String s;
    try {
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[65] = jj_gen;
          break label_36;
        }
        jj_consume_token(S);
      }
      if (jj_2_8(3)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:{
          s = unaryOperator();
jjtn000.appendText (s);
          break;
          }
        default:
          jj_la1[66] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER:{
          t = jj_consume_token(INTEGER);
jjtn000.appendText (t.image);
          break;
          }
        default:
          jj_la1[67] = jj_gen;
          ;
        }
        t = jj_consume_token(N);
jjtn000.appendText ("n");
        if (jj_2_7(2)) {
          label_37:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:{
              ;
              break;
              }
            default:
              jj_la1[68] = jj_gen;
              break label_37;
            }
            jj_consume_token(S);
          }
          s = unaryOperator();
jjtn000.appendText (s);
          label_38:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:{
              ;
              break;
              }
            default:
              jj_la1[69] = jj_gen;
              break label_38;
            }
            jj_consume_token(S);
          }
          t = jj_consume_token(INTEGER);
jjtn000.appendText (t.image);
        } else {
          ;
        }
      } else if (jj_2_9(2)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:{
          s = unaryOperator();
jjtn000.appendText (s);
          break;
          }
        default:
          jj_la1[70] = jj_gen;
          ;
        }
        t = jj_consume_token(INTEGER);
jjtn000.appendText (t.image);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EVEN:{
          t = jj_consume_token(EVEN);
jjtn000.appendText (t.image);
          break;
          }
        case ODD:{
          t = jj_consume_token(ODD);
jjtn000.appendText (t.image);
          break;
          }
        default:
          jj_la1[71] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[72] = jj_gen;
          break label_39;
        }
        jj_consume_token(S);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void pseudo() throws ParseException {/*@bgen(jjtree) pseudo */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTPSEUDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(COLON);
jjtn000.setText (":");
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLON:{
        jj_consume_token(COLON);
jjtn000.appendText (":");
        break;
        }
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FUNCTION_NTH:{
        jj_consume_token(FUNCTION_NTH);
jjtn000.appendText (token.image);
        pseudoNth();
        jj_consume_token(RROUND);
        break;
        }
      default:
        jj_la1[76] = jj_gen;
        if (jj_2_10(2147483647)) {
          jj_consume_token(FUNCTION);
jjtn000.appendText (token.image);
          label_40:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:{
              ;
              break;
              }
            default:
              jj_la1[74] = jj_gen;
              break label_40;
            }
            jj_consume_token(S);
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PLUS:
          case MINUS:
          case STRING1:
          case STRING2:
          case NUMBER:
          case HASH:
          case INHERIT:
          case FROM_SYM:
          case TO_SYM:
          case IDENT:
          case EM:
          case EX:
          case PX:
          case REM:
          case VW:
          case VH:
          case VMIN:
          case CH:
          case DPI:
          case DPCM:
          case DPPX:
          case LENGTH_CM:
          case LENGTH_MM:
          case LENGTH_IN:
          case LENGTH_PT:
          case LENGTH_PC:
          case ANGLE_DEG:
          case ANGLE_RAD:
          case ANGLE_GRAD:
          case ANGLE_TURN:
          case TIME_MS:
          case TIME_S:
          case FREQ_HZ:
          case FREQ_KHZ:
          case PERCENTAGE:
          case URL:
          case FUNCTION_CALC:
          case FUNCTION_EXPRESSION:
          case FUNCTION:
          case URANGE:{
            expr();
            break;
            }
          default:
            jj_la1[75] = jj_gen;
            ;
          }
          jj_consume_token(RROUND);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IDENT:{
            jj_consume_token(IDENT);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.appendText (token.image);
            break;
            }
          default:
            jj_la1[77] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void negation() throws ParseException {/*@bgen(jjtree) negation */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTNEGATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FUNCTION_NOT);
jjtn000.setText (":not(");
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[78] = jj_gen;
          break label_41;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LSQUARE:
      case DOT:
      case COLON:
      case ASTERISK:
      case DASH:
      case HASH:
      case IDENT:
      case PERCENTAGE:
      case FUNCTION_NOT:{
        selector();
        label_42:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[79] = jj_gen;
            break label_42;
          }
          jj_consume_token(S);
        }
        label_43:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[80] = jj_gen;
            break label_43;
          }
          jj_consume_token(COMMA);
          label_44:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:{
              ;
              break;
              }
            default:
              jj_la1[81] = jj_gen;
              break label_44;
            }
            jj_consume_token(S);
          }
          selector();
          label_45:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:{
              ;
              break;
              }
            default:
              jj_la1[82] = jj_gen;
              break label_45;
            }
            jj_consume_token(S);
          }
        }
        break;
        }
      default:
        jj_la1[83] = jj_gen;
        ;
      }
      jj_consume_token(RROUND);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void simpleSelectorSequence() throws ParseException {
    if (jj_2_11(2)) {
      typeSelector();
      label_46:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LSQUARE:
        case DOT:
        case COLON:
        case HASH:
        case FUNCTION_NOT:{
          ;
          break;
          }
        default:
          jj_la1[84] = jj_gen;
          break label_46;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case HASH:{
          hash();
          break;
          }
        case DOT:{
          _class();
          break;
          }
        case LSQUARE:{
          attrib();
          break;
          }
        case COLON:{
          pseudo();
          break;
          }
        case FUNCTION_NOT:{
          negation();
          break;
          }
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LSQUARE:
      case DOT:
      case COLON:
      case HASH:
      case FUNCTION_NOT:{
        label_47:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case HASH:{
            hash();
            break;
            }
          case DOT:{
            _class();
            break;
            }
          case LSQUARE:{
            attrib();
            break;
            }
          case COLON:{
            pseudo();
            break;
            }
          case FUNCTION_NOT:{
            negation();
            break;
            }
          default:
            jj_la1[86] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LSQUARE:
          case DOT:
          case COLON:
          case HASH:
          case FUNCTION_NOT:{
            ;
            break;
            }
          default:
            jj_la1[87] = jj_gen;
            break label_47;
          }
        }
        break;
        }
      case PERCENTAGE:{
        jj_consume_token(PERCENTAGE);
        break;
        }
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void selectorCombinator() throws ParseException {/*@bgen(jjtree) selectorCombinator */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTSELECTORCOMBINATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_12(2)) {
        label_48:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[89] = jj_gen;
            break label_48;
          }
          jj_consume_token(S);
        }
        jj_consume_token(PLUS);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText ("+");
      } else if (jj_2_13(2)) {
        label_49:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[90] = jj_gen;
            break label_49;
          }
          jj_consume_token(S);
        }
        jj_consume_token(GREATER);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (">");
      } else if (jj_2_14(2)) {
        label_50:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[91] = jj_gen;
            break label_50;
          }
          jj_consume_token(S);
        }
        jj_consume_token(TILDE);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText ("~");
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          jj_consume_token(S);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (" ");
          break;
          }
        default:
          jj_la1[92] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void selector() throws ParseException {/*@bgen(jjtree) selector */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      simpleSelectorSequence();
      label_51:
      while (true) {
        if (jj_2_15(3)) {
          ;
        } else {
          break label_51;
        }
        selectorCombinator();
        label_52:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[93] = jj_gen;
            break label_52;
          }
          jj_consume_token(S);
        }
        simpleSelectorSequence();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void property() throws ParseException {/*@bgen(jjtree) property */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IDENT);
jjtn000.setText (token.image);
      label_53:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[94] = jj_gen;
          break label_53;
        }
        jj_consume_token(S);
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void important() throws ParseException {/*@bgen(jjtree) important */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTIMPORTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IMPORTANT_SYM);
jjtn000.setText (token.image);
      label_54:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[95] = jj_gen;
          break label_54;
        }
        jj_consume_token(S);
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void styleDeclaration() throws ParseException {/*@bgen(jjtree) styleDeclaration */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTSTYLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      try {
        property();
        jj_consume_token(COLON);
        label_55:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[96] = jj_gen;
            break label_55;
          }
          jj_consume_token(S);
        }
        expr();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORTANT_SYM:{
          important();
          break;
          }
        default:
          jj_la1[97] = jj_gen;
          ;
        }
      } catch (ParseException ex) {
if (m_bBrowserCompliantMode)
    browserCompliantSkipDecl ();
  else
    {if (true) throw ex;}
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
    }
  }

  final public void stylePageRuleDeclaration() throws ParseException {/*@bgen(jjtree) stylePageRuleDeclaration */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTSTYLEPAGERULEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AT_UNKNOWN:{
          unknownRule();
          label_56:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:{
              ;
              break;
              }
            default:
              jj_la1[98] = jj_gen;
              break label_56;
            }
            jj_consume_token(S);
          }
          break;
          }
        case IDENT:{
          property();
          jj_consume_token(COLON);
          label_57:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:{
              ;
              break;
              }
            default:
              jj_la1[99] = jj_gen;
              break label_57;
            }
            jj_consume_token(S);
          }
          expr();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IMPORTANT_SYM:{
            important();
            break;
            }
          default:
            jj_la1[100] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[101] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException ex) {
if (m_bBrowserCompliantMode)
    browserCompliantSkipDecl ();
  else
    {if (true) throw ex;}
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtn000.jjtSetLastToken(getToken(0));
  }
    }
  }

  final public CSSNode styleDeclarationList() throws ParseException {/*@bgen(jjtree) styleDeclarationList */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTSTYLEDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_58:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[102] = jj_gen;
          break label_58;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENT:{
        styleDeclaration();
        break;
        }
      default:
        jj_la1[103] = jj_gen;
        ;
      }
      label_59:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEMICOLON:{
          ;
          break;
          }
        default:
          jj_la1[104] = jj_gen;
          break label_59;
        }
        jj_consume_token(SEMICOLON);
        label_60:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[105] = jj_gen;
            break label_60;
          }
          jj_consume_token(S);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENT:{
          styleDeclaration();
          break;
          }
        default:
          jj_la1[106] = jj_gen;
          ;
        }
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public CSSNode stylePageRuleDeclarationList() throws ParseException {/*@bgen(jjtree) stylePageRuleDeclarationList */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTSTYLEPAGERULEDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_61:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[107] = jj_gen;
          break label_61;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AT_UNKNOWN:
      case IDENT:{
        stylePageRuleDeclaration();
        break;
        }
      default:
        jj_la1[108] = jj_gen;
        ;
      }
      label_62:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEMICOLON:{
          ;
          break;
          }
        default:
          jj_la1[109] = jj_gen;
          break label_62;
        }
        jj_consume_token(SEMICOLON);
        label_63:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[110] = jj_gen;
            break label_63;
          }
          jj_consume_token(S);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AT_UNKNOWN:
        case IDENT:{
          stylePageRuleDeclaration();
          break;
          }
        default:
          jj_la1[111] = jj_gen;
          ;
        }
      }
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void styleDeclarationBlock() throws ParseException {
    jj_consume_token(LBRACE);
    try {
      styleDeclarationList();
      jj_consume_token(RBRACE);
    } catch (ParseException ex) {
if (m_bBrowserCompliantMode)
    browserCompliantSkip ();
  else
    errorSkipTo (ex, RBRACE);
    }
  }

  final public void stylePageRuleDeclarationBlock() throws ParseException {
    jj_consume_token(LBRACE);
    try {
      stylePageRuleDeclarationList();
      jj_consume_token(RBRACE);
    } catch (ParseException ex) {
if (m_bBrowserCompliantMode)
    browserCompliantSkip ();
  else
    errorSkipTo (ex, RBRACE);
    }
  }

  final public void styleRule() throws ParseException {/*@bgen(jjtree) styleRule */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTSTYLERULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      selector();
      label_64:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[112] = jj_gen;
          break label_64;
        }
        jj_consume_token(S);
      }
      label_65:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[113] = jj_gen;
          break label_65;
        }
        jj_consume_token(COMMA);
        label_66:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[114] = jj_gen;
            break label_66;
          }
          jj_consume_token(S);
        }
        selector();
        label_67:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[115] = jj_gen;
            break label_67;
          }
          jj_consume_token(S);
        }
      }
      styleDeclarationBlock();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//
// Media rule
//
  final public void mediaModifier() throws ParseException {/*@bgen(jjtree) mediaModifier */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTMEDIAMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT_SYM:
      case ONLY_SYM:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ONLY_SYM:{
          jj_consume_token(ONLY_SYM);
jjtn000.setText (token.image);
          jj_consume_token(S);
          break;
          }
        case NOT_SYM:{
          jj_consume_token(NOT_SYM);
jjtn000.setText (token.image);
          jj_consume_token(S);
          break;
          }
        default:
          jj_la1[116] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[117] = jj_gen;
        ;
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void medium() throws ParseException {/*@bgen(jjtree) medium */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTMEDIUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IDENT);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (token.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void mediaFeature() throws ParseException {/*@bgen(jjtree) mediaFeature */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTMEDIAFEATURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IDENT);
jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (token.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void mediaExpr() throws ParseException {/*@bgen(jjtree) mediaExpr */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTMEDIAEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LROUND);
      label_68:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[118] = jj_gen;
          break label_68;
        }
        jj_consume_token(S);
      }
      mediaFeature();
      label_69:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[119] = jj_gen;
          break label_69;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLON:{
        jj_consume_token(COLON);
        label_70:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[120] = jj_gen;
            break label_70;
          }
          jj_consume_token(S);
        }
        expr();
        break;
        }
      default:
        jj_la1[121] = jj_gen;
        ;
      }
      jj_consume_token(RROUND);
      label_71:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[122] = jj_gen;
          break label_71;
        }
        jj_consume_token(S);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void mediaQuery() throws ParseException {/*@bgen(jjtree) mediaQuery */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTMEDIAQUERY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT_SYM:
      case ONLY_SYM:
      case IDENT:{
        mediaModifier();
        medium();
        label_72:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[123] = jj_gen;
            break label_72;
          }
          jj_consume_token(S);
        }
        label_73:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AND_SYM:{
            ;
            break;
            }
          default:
            jj_la1[124] = jj_gen;
            break label_73;
          }
          jj_consume_token(AND_SYM);
          label_74:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:{
              ;
              break;
              }
            default:
              jj_la1[125] = jj_gen;
              break label_74;
            }
            jj_consume_token(S);
          }
          mediaExpr();
        }
        break;
        }
      case LROUND:{
        mediaExpr();
        label_75:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AND_SYM:{
            ;
            break;
            }
          default:
            jj_la1[126] = jj_gen;
            break label_75;
          }
          jj_consume_token(AND_SYM);
          label_76:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:{
              ;
              break;
              }
            default:
              jj_la1[127] = jj_gen;
              break label_76;
            }
            jj_consume_token(S);
          }
          mediaExpr();
        }
        break;
        }
      default:
        jj_la1[128] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void mediaList() throws ParseException {/*@bgen(jjtree) mediaList */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTMEDIALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      mediaQuery();
      label_77:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[129] = jj_gen;
          break label_77;
        }
        jj_consume_token(COMMA);
        label_78:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[130] = jj_gen;
            break label_78;
          }
          jj_consume_token(S);
        }
        mediaQuery();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void mediaRuleList() throws ParseException {
    label_79:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LSQUARE:
      case DOT:
      case COLON:
      case ASTERISK:
      case DASH:
      case HASH:
      case IDENT:
      case PERCENTAGE:
      case FUNCTION_NOT:{
        styleRule();
        break;
        }
      case MEDIA_SYM:{
        mediaRule();
        break;
        }
      case PAGE_SYM:{
        pageRule();
        break;
        }
      case FONTFACE_SYM:{
        fontfaceRule();
        break;
        }
      case KEYFRAMES_SYM:{
        keyframesRule();
        break;
        }
      case VIEWPORT_SYM:{
        viewportRule();
        break;
        }
      case SUPPORTS_SYM:{
        supportsRule();
        break;
        }
      case AT_UNKNOWN:{
        unknownRule();
        break;
        }
      case CHARSET_SYM:{
        charsetRule();
errorUnexpectedRule ("@charset", "charset rule in the middle of a @media rule is not allowed!");
        break;
        }
      case IMPORT_SYM:{
        importRule();
errorUnexpectedRule ("@import", "import rule in the middle of a @media rule is not allowed!");
        break;
        }
      case NAMESPACE_SYM:{
        namespaceRule();
errorUnexpectedRule ("@namespace", "namespace rule in the middle of a @media rule is not allowed!");
        break;
        }
      default:
        jj_la1[131] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_80:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[132] = jj_gen;
          break label_80;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LSQUARE:
      case DOT:
      case COLON:
      case ASTERISK:
      case DASH:
      case HASH:
      case CHARSET_SYM:
      case IMPORT_SYM:
      case NAMESPACE_SYM:
      case PAGE_SYM:
      case MEDIA_SYM:
      case FONTFACE_SYM:
      case KEYFRAMES_SYM:
      case VIEWPORT_SYM:
      case SUPPORTS_SYM:
      case AT_UNKNOWN:
      case IDENT:
      case PERCENTAGE:
      case FUNCTION_NOT:{
        ;
        break;
        }
      default:
        jj_la1[133] = jj_gen;
        break label_79;
      }
    }
  }

  final public void mediaRule() throws ParseException {/*@bgen(jjtree) mediaRule */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTMEDIARULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(MEDIA_SYM);
      label_81:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[134] = jj_gen;
          break label_81;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LROUND:
      case NOT_SYM:
      case ONLY_SYM:
      case IDENT:{
        mediaList();
        break;
        }
      default:
        jj_la1[135] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      try {
        label_82:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[136] = jj_gen;
            break label_82;
          }
          jj_consume_token(S);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LSQUARE:
        case DOT:
        case COLON:
        case ASTERISK:
        case DASH:
        case HASH:
        case CHARSET_SYM:
        case IMPORT_SYM:
        case NAMESPACE_SYM:
        case PAGE_SYM:
        case MEDIA_SYM:
        case FONTFACE_SYM:
        case KEYFRAMES_SYM:
        case VIEWPORT_SYM:
        case SUPPORTS_SYM:
        case AT_UNKNOWN:
        case IDENT:
        case PERCENTAGE:
        case FUNCTION_NOT:{
          mediaRuleList();
          break;
          }
        default:
          jj_la1[137] = jj_gen;
          ;
        }
        jj_consume_token(RBRACE);
      } catch (ParseException ex) {
if (m_bBrowserCompliantMode)
    browserCompliantSkip ();
  else
    errorSkipTo (ex, RBRACE);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//
// Page rule
//
  final public void pseudoPage() throws ParseException {/*@bgen(jjtree) pseudoPage */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTPSEUDOPAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(COLON);
      jj_consume_token(IDENT);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (":" + token.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void pageRule() throws ParseException {/*@bgen(jjtree) pageRule */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTPAGERULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(PAGE_SYM);
      label_83:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[138] = jj_gen;
          break label_83;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLON:{
        pseudoPage();
        label_84:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[139] = jj_gen;
            break label_84;
          }
          jj_consume_token(S);
        }
        break;
        }
      default:
        jj_la1[140] = jj_gen;
        ;
      }
      stylePageRuleDeclarationBlock();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//
// Font face rule
//
  final public void fontfaceRule() throws ParseException {/*@bgen(jjtree) fontfaceRule */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTFONTFACERULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FONTFACE_SYM);
      styleDeclarationBlock();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//
// Keyframes rule
// http://dev.w3.org/csswg/css3-animations/#keyframes
//
  final public void keyframesIdentifier() throws ParseException {/*@bgen(jjtree) keyframesIdentifier */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTKEYFRAMESIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IDENT);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (token.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void singleKeyframeSelector() throws ParseException {/*@bgen(jjtree) singleKeyframeSelector */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTSINGLEKEYFRAMESELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FROM_SYM:{
        jj_consume_token(FROM_SYM);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (token.image);
        break;
        }
      case TO_SYM:{
        jj_consume_token(TO_SYM);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (token.image);
        break;
        }
      case PERCENTAGE:{
        jj_consume_token(PERCENTAGE);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (token.image);
        break;
        }
      default:
        jj_la1[141] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void keyframesSelector() throws ParseException {/*@bgen(jjtree) keyframesSelector */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTKEYFRAMESSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      singleKeyframeSelector();
      label_85:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[142] = jj_gen;
          break label_85;
        }
        jj_consume_token(S);
      }
      label_86:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[143] = jj_gen;
          break label_86;
        }
        jj_consume_token(COMMA);
        label_87:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[144] = jj_gen;
            break label_87;
          }
          jj_consume_token(S);
        }
        singleKeyframeSelector();
        label_88:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[145] = jj_gen;
            break label_88;
          }
          jj_consume_token(S);
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void keyframesBlocks() throws ParseException {
    label_89:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FROM_SYM:
      case TO_SYM:
      case PERCENTAGE:{
        ;
        break;
        }
      default:
        jj_la1[146] = jj_gen;
        break label_89;
      }
      keyframesSelector();
      styleDeclarationBlock();
      label_90:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[147] = jj_gen;
          break label_90;
        }
        jj_consume_token(S);
      }
    }
  }

  final public void keyframesRule() throws ParseException {/*@bgen(jjtree) keyframesRule */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTKEYFRAMESRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(KEYFRAMES_SYM);
jjtn000.setText (token.image);
      jj_consume_token(S);
      keyframesIdentifier();
      jj_consume_token(LBRACE);
      try {
        label_91:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[148] = jj_gen;
            break label_91;
          }
          jj_consume_token(S);
        }
        keyframesBlocks();
        jj_consume_token(RBRACE);
      } catch (ParseException ex) {
if (m_bBrowserCompliantMode)
    browserCompliantSkip ();
  else
    errorSkipTo (ex, RBRACE);
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//
// Viewport rule
// http://dev.w3.org/csswg/css-device-adapt/#the-atviewport-rule
//
  final public void viewportRule() throws ParseException {/*@bgen(jjtree) viewportRule */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTVIEWPORTRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(VIEWPORT_SYM);
jjtn000.setText (token.image);
      styleDeclarationBlock();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//
// Supports rule
// http://www.w3.org/TR/2013/CR-css3-conditional-20130404/#at-supports
//
  final public void supportsConditionInParens() throws ParseException {/*@bgen(jjtree) supportsConditionInParens */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTSUPPORTSCONDITIONINPARENS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LROUND);
      label_92:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[149] = jj_gen;
          break label_92;
        }
        jj_consume_token(S);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENT:{
        styleDeclaration();
        break;
        }
      case LROUND:
      case NOT_SYM:{
        supportsCondition();
        label_93:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[150] = jj_gen;
            break label_93;
          }
          jj_consume_token(S);
        }
        break;
        }
      default:
        jj_la1[151] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(RROUND);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void supportsNegation() throws ParseException {/*@bgen(jjtree) supportsNegation */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTSUPPORTSNEGATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(NOT_SYM);
      label_94:
      while (true) {
        jj_consume_token(S);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[152] = jj_gen;
          break label_94;
        }
      }
      supportsConditionInParens();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void supportsConditionOperator() throws ParseException {/*@bgen(jjtree) supportsConditionOperator */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTSUPPORTSCONDITIONOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND_SYM:{
        jj_consume_token(AND_SYM);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (token.image);
        break;
        }
      case OR_SYM:{
        jj_consume_token(OR_SYM);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (token.image);
        break;
        }
      default:
        jj_la1[153] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void supportsCondition() throws ParseException {/*@bgen(jjtree) supportsCondition */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTSUPPORTSCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT_SYM:{
        supportsNegation();
        break;
        }
      case LROUND:{
        supportsConditionInParens();
        label_95:
        while (true) {
          if (jj_2_16(2)) {
            ;
          } else {
            break label_95;
          }
          label_96:
          while (true) {
            jj_consume_token(S);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:{
              ;
              break;
              }
            default:
              jj_la1[154] = jj_gen;
              break label_96;
            }
          }
          supportsConditionOperator();
          label_97:
          while (true) {
            jj_consume_token(S);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case S:{
              ;
              break;
              }
            default:
              jj_la1[155] = jj_gen;
              break label_97;
            }
          }
          supportsConditionInParens();
        }
        break;
        }
      default:
        jj_la1[156] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void supportsRuleBodyRule() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LSQUARE:
    case DOT:
    case COLON:
    case ASTERISK:
    case DASH:
    case HASH:
    case IDENT:
    case PERCENTAGE:
    case FUNCTION_NOT:{
      styleRule();
      break;
      }
    case MEDIA_SYM:{
      mediaRule();
      break;
      }
    case PAGE_SYM:{
      pageRule();
      break;
      }
    case FONTFACE_SYM:{
      fontfaceRule();
      break;
      }
    case KEYFRAMES_SYM:{
      keyframesRule();
      break;
      }
    case SUPPORTS_SYM:{
      supportsRule();
      break;
      }
    case AT_UNKNOWN:{
      unknownRule();
      break;
      }
    case CHARSET_SYM:{
      charsetRule();
errorUnexpectedRule ("@charset", "charset rule in the middle of a @supports rule is not allowed!");
      break;
      }
    case IMPORT_SYM:{
      importRule();
errorUnexpectedRule ("@import", "import rule in the middle of a @supports rule is not allowed!");
      break;
      }
    case NAMESPACE_SYM:{
      namespaceRule();
errorUnexpectedRule ("@namespace", "namespace rule in the middle of a @supports rule is not allowed!");
      break;
      }
    case VIEWPORT_SYM:{
      viewportRule();
errorUnexpectedRule ("@viewport", "viewport rule in the middle of a @supports rule is not allowed!");
      break;
      }
    default:
      jj_la1[157] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void supportsRuleBody() throws ParseException {
    jj_consume_token(LBRACE);
    try {
      label_98:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[158] = jj_gen;
          break label_98;
        }
        jj_consume_token(S);
      }
      label_99:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LSQUARE:
        case DOT:
        case COLON:
        case ASTERISK:
        case DASH:
        case HASH:
        case CHARSET_SYM:
        case IMPORT_SYM:
        case NAMESPACE_SYM:
        case PAGE_SYM:
        case MEDIA_SYM:
        case FONTFACE_SYM:
        case KEYFRAMES_SYM:
        case VIEWPORT_SYM:
        case SUPPORTS_SYM:
        case AT_UNKNOWN:
        case IDENT:
        case PERCENTAGE:
        case FUNCTION_NOT:{
          ;
          break;
          }
        default:
          jj_la1[159] = jj_gen;
          break label_99;
        }
        supportsRuleBodyRule();
        label_100:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S:{
            ;
            break;
            }
          default:
            jj_la1[160] = jj_gen;
            break label_100;
          }
          jj_consume_token(S);
        }
      }
      jj_consume_token(RBRACE);
    } catch (ParseException ex) {
if (m_bBrowserCompliantMode)
    browserCompliantSkip ();
  else
    errorSkipTo (ex, RBRACE);
    }
  }

  final public void supportsRule() throws ParseException {/*@bgen(jjtree) supportsRule */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTSUPPORTSRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SUPPORTS_SYM);
      label_101:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[161] = jj_gen;
          break label_101;
        }
        jj_consume_token(S);
      }
      supportsCondition();
      label_102:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S:{
          ;
          break;
          }
        default:
          jj_la1[162] = jj_gen;
          break label_102;
        }
        jj_consume_token(S);
      }
      supportsRuleBody();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//
// Unknown rule
//
  final public void unknownRuleParameterList() throws ParseException {/*@bgen(jjtree) unknownRuleParameterList */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTUNKNOWNRULEPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String s;
    try {
      s = javaSkipToOpeningBrace();
jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                 jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (s);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void unknownRuleBody() throws ParseException {/*@bgen(jjtree) unknownRuleBody */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTUNKNOWNRULEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String s;
    try {
      s = javaSkipToClosingBrace();
jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                                 jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText (s);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof ParseEOFException) {
      {if (true) throw (ParseEOFException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

// Any unsupported rule
  final public void unknownRule() throws ParseException {/*@bgen(jjtree) unknownRule */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTUNKNOWNRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(AT_UNKNOWN);
jjtn000.setText (token.image);
      unknownRuleParameterList();
      unknownRuleBody();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
token_source.SwitchTo (DEFAULT);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//
// Error handling
// 
  final public void invalid() throws ParseException {/*@bgen(jjtree) invalid */
  com.helger.css.parser.CSSNode jjtn000 = new com.helger.css.parser.CSSNode(JJTINVALID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INVALID_STRING1:{
        jj_consume_token(INVALID_STRING1);
        break;
        }
      case INVALID_STRING2:{
        jj_consume_token(INVALID_STRING2);
        break;
        }
      default:
        jj_la1[163] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_3_13()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(4)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(4)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_148()
 {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_162()
 {
    if (jj_scan_token(OR_SYM)) return true;
    return false;
  }

  private boolean jj_3R_147()
 {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3R_161()
 {
    if (jj_scan_token(TO_SYM)) return true;
    return false;
  }

  private boolean jj_3R_146()
 {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_160()
 {
    if (jj_scan_token(FROM_SYM)) return true;
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_159()
 {
    if (jj_scan_token(ONLY_SYM)) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_144()
 {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_158()
 {
    if (jj_scan_token(NOT_SYM)) return true;
    return false;
  }

  private boolean jj_3R_157()
 {
    if (jj_scan_token(AND_SYM)) return true;
    return false;
  }

  private boolean jj_3R_130()
 {
    Token xsp;
    if (jj_3R_143()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_143()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_156()
 {
    if (jj_scan_token(INHERIT)) return true;
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_155()
 {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    Token xsp;
    if (jj_scan_token(4)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(4)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_149()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_110()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_111()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_scan_token(OR_SYM)) return true;
    return false;
  }

  private boolean jj_3R_131()
 {
    if (jj_scan_token(AND_SYM)) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    return false;
  }

  private boolean jj_3R_154()
 {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_142()
 {
    if (jj_scan_token(FUNCTION_NOT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(4)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_154()) jj_scanpos = xsp;
    if (jj_scan_token(RROUND)) return true;
    return false;
  }

  private boolean jj_3R_153()
 {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_152()
 {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(NAMESPACE_SYM)) return true;
    return false;
  }

  private boolean jj_3R_151()
 {
    if (jj_scan_token(FUNCTION_NTH)) return true;
    return false;
  }

  private boolean jj_3R_150()
 {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(IMPORT_SYM)) return true;
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(CHARSET_SYM)) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(4)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_106()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(4)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    if (jj_scan_token(N)) return true;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_scan_token(LSQUARE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(4)) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(4)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_103()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(4)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_scan_token(LROUND)) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    if (jj_scan_token(HASH)) return true;
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_123()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  private boolean jj_3R_120()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    }
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) jj_scanpos = xsp;
    if (jj_scan_token(DASH)) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_112()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(4)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_163()
 {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    if (jj_scan_token(S)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(4)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserCSS30TokenManager token_source;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[164];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x0,0x0,0x10,0x10,0x0,0x10,0x10,0x1800000,0x0,0x10,0x1800c00,0x0,0xc00,0x0,0xc00,0x10,0x10,0x1000,0x0,0x10,0x10,0xc00,0x10,0x10,0x10,0xc00,0x0,0x1800c00,0x10,0x10,0x10,0x10,0x0,0x1800c00,0x0,0x10,0x10,0x10,0x1800000,0x10,0x1000,0x1800000,0x10,0x10,0x0,0x10,0x0,0x0,0x0,0x0,0x1800000,0x10,0x0,0x10,0x10,0x10,0x0,0x10,0xc00,0x200,0x10,0x10,0xc00,0x180,0x10,0x0,0x10,0x1800c00,0x0,0x0,0x10,0x10,0x0,0x10,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x0,0x10,0x10,0x0,0x0,0x10,0x0,0x0,0x10,0x0,0x10,0x0,0x0,0x10,0x0,0x10,0x0,0x10,0x10,0x0,0x0,0x10,0x10,0x10,0x0,0x10,0x10,0x0,0x10,0x0,0x10,0x1000,0x0,0x10,0x0,0x10,0x0,0x10,0x1000,0x10,0x0,0x10,0x10,0x0,0x0,0x10,0x0,0x10,0x10,0x0,0x10,0x10,0x10,0x10,0x1000,0x10,0x0,0x10,0x10,0x1000,0x0,0x10,0x0,0x10,0x10,0x10,0x6000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x600000,0x600000,0x600000,0x600000,0x600000,0x600000,0x600000,0x600000,0xff809328,0xff809328,0x600000,0x600000,0x4,0x600000,0x600000,0x0,0x0,0x0,0x8001,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x600,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x8001,0x0,0x0,0x0,0x0,0xc40,0x8c41,0xc40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x200,0x1f0800,0x0,0x0,0x200,0x0,0x0,0x0,0x1f0800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x8001,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x9328,0x8128,0x8128,0x8128,0x8128,0x8128,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0xff809328,0x0,0xff809328,0x0,0x0,0x0,0xff809328,0x0,0x0,0x100,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xff809328,0x0,0xff809328,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x201,0x201,0x0,0x0,0x0,0x0,0x0,0x0,0x3fc,0x0,0xfffffec4,0x0,0x0,0xfffffc00,0x0,0x0,0x0,0xfffffc00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffc00,0xfffffec4,0x0,0x0,0x0,0x0,0x0,0xfffffec4,0x0,0x0,0x0,0x0,0x0,0x0,0x230,0x0,0x0,0x0,0x200,0x0,0x200,0x200,0x200,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffec4,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x2,0x201,0x0,0x200,0x0,0x0,0x200,0x0,0x201,0x0,0x0,0x201,0x0,0x0,0x0,0x0,0x30,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x8,0x0,0x230,0x0,0x0,0x201,0x0,0x201,0x0,0x230,0x0,0x201,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0xc0,0x0,0x0,0x0,0x0,0x210,0x0,0x108,0x0,0x0,0x10,0x201,0x0,0x201,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x737,0x300,0x0,0x3,0x0,0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x737,0x0,0x0,0x0,0x0,0x0,0x737,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x737,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x40,0x40,0x40,0x40,0x44,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x0,0x44,0x0,0x0,0x0,0x44,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44,0x0,0x44,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[16];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with user supplied CharStream. */
  public ParserCSS30(CharStream stream) {
    token_source = new ParserCSS30TokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 164; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 164; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ParserCSS30(ParserCSS30TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 164; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserCSS30TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 164; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[109];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 164; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 109; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 16; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
              case 2: jj_3_3(); break;
              case 3: jj_3_4(); break;
              case 4: jj_3_5(); break;
              case 5: jj_3_6(); break;
              case 6: jj_3_7(); break;
              case 7: jj_3_8(); break;
              case 8: jj_3_9(); break;
              case 9: jj_3_10(); break;
              case 10: jj_3_11(); break;
              case 11: jj_3_12(); break;
              case 12: jj_3_13(); break;
              case 13: jj_3_14(); break;
              case 14: jj_3_15(); break;
              case 15: jj_3_16(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
