// ====== Gradle Build Script for wallee-applications ======

// ------ Plugins ------

buildscript {
  repositories {
    // TODO: Solve the chicken-and-egg problem with using the artifactory repo to download
    // the buildtools and configuring the artifactory repo by applying the buildtools plugins!
    def f = project.file("${System.getProperty('user.home')}/.gradle/cw-repo-password.properties")
    def p = f.toPath()
    assert Files.isReadable(p) : "Customweb repo password file does not exist or is not readable by the current user '${System.getProperty('user.name')}': '${p}'"
    def perms = PosixFilePermissions.toString(Files.getPosixFilePermissions(p))
    assert perms.endsWith('------') : "Customweb repo password file '${f}' is accessible by group and/or others (permissions '${perms}'); please make sure that the file is neither readable nor writable nor executable by anyone else than the current user '${System.getProperty('user.name')}'!"
    def props = new Properties()
    try {
      f.withInputStream { props.load(it) }
    } catch(Exception exc) {
      throw new IOException("Failed to read Customweb repo password file '${p}': ${exc}", exc)
    }
    assert props['user'] != null && !props['user'].isEmpty() : "Missing or empty property 'user' in Customweb repo password file '${f}'."
    assert props['password'] != null && !props['password'].isEmpty() : "Missing or empty property 'password' in Customweb repo password file '${f}'."

    maven {
      url 'https://repo.customweb.com/artifactory/repo'
      credentials {
        username props['user']
        password props['password']
      }
    }

	maven {
		url "http://dl.bintray.com/jtwig/maven/"
	}

  }

  dependencies {
    classpath 'io.wallee:buildtools:0.3.+'
  }
}


// ------ Basic Configuration ------

group = 'io.wallee'
ext.buildVersion = '1.0'
ext.javaVersion = '1.8'
defaultTasks 'buildAll'

apply plugin: 'io.wallee.single-java-project'

// ---- Dependencies ----

dependencies {
    compile "com.helger:ph-commons:6.1.1"
    
    testRuntime "ch.qos.logback:logback-classic:1.1.2"
}

// ---- Custom Tasks ----

task buildAll {
	group = 'Build'
	description = "Executes a clean build for the complete project."
	dependsOn 'clean', 'build'
}

task dependencyCheck (type: OwaspDependencyCheckTask) {
	group = 'Help'
	description 'Checks Java library dependencies for known security problems using the OWASP dependency check.'
	
	gradle.projectsEvaluated {
		allprojects { p ->
			// println "PROJECT: ${p} (${p.configurations})"
			p.configurations.each { c ->
				// println "    CONFIGURATION: ${c}"
				c.each { f ->
					// println "        SOURCE: ${f}"
					source f
				}
			}
		}
	}
}

// ---- Imports ----

import java.nio.file.Files;
import java.nio.file.attribute.PosixFilePermissions;
import java.util.Properties;

import io.wallee.buildtools.gradle.tasks.OwaspDependencyCheckTask
